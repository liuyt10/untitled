{
  "uid" : "9bf6ec95ba2d184b",
  "name" : "test_buy_now_params[sku_id已下架-sku_id1-num1-expect_statuscode1-\"004\"-不合法]",
  "fullName" : "testcases.buyer.test_001_buy_now_api.TestBuyNowApi#test_buy_now_params",
  "historyId" : "a3aaa9407e049e5e112b45b62b9a36a4",
  "time" : {
    "start" : 1659253817959,
    "stop" : 1659253818056,
    "duration" : 97
  },
  "status" : "failed",
  "statusMessage" : "pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\n\n1 Failed Assumptions:\n\ntestcases\\buyer\\test_001_buy_now_api.py:35: AssumptionFailure\n>>\tpytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\nAssertionError: 实际值是:200,期望值是：500\nassert False",
  "statusTrace" : "self = <apiframework.testcases.buyer.test_001_buy_now_api.TestBuyNowApi object at 0x000001F254F247F0>\ncasename = 'sku_id已下架', sku_id = 538, num = 1, expect_statuscode = 500\nexpect_code = '\"004\"', expect_message = '不合法'\n\n    @pytest.mark.parametrize('casename,sku_id,num,expect_statuscode,expect_code,expect_message', test_data)\n    def test_buy_now_params(self,casename, sku_id, num, expect_statuscode, expect_code, expect_message):\n        # 调用BuyNowApi\n        buy_now_api = BuyNowApi(sku_id=sku_id,num=num)\n        resp = buy_now_api.send()\n        status_code = resp.status_code\n        print(resp.text)\n        # assert status_code==expect_statuscode\n        pytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\n        print(resp.text)\n        # 第一个参数是判断表达式，第二个参数是失败之后的提示语\n>       pytest.assume(resp.json()['code'] == expect_code.replace('\"',''), f\"实际值是：{resp.json()['code']},期望值是：{expect_code}\")\n\ntestcases\\buyer\\test_001_buy_now_api.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001F2517E8310>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           pytest_assume.plugin.FailedAssumption: \nE           Original Failure:\nE           \nE           >> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\nE           \nE           1 Failed Assumptions:\nE           \nE           testcases\\buyer\\test_001_buy_now_api.py:35: AssumptionFailure\nE           >>\tpytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\nE           AssertionError: 实际值是:200,期望值是：500\nE           assert False\n\nD:\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: FailedAssumption",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1659253817188,
      "stop" : 1659253817300,
      "duration" : 112
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_buyer_token",
    "time" : {
      "start" : 1659253817300,
      "stop" : 1659253817492,
      "duration" : 192
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.buyer"
  }, {
    "name" : "suite",
    "value" : "test_001_buy_now_api"
  }, {
    "name" : "subSuite",
    "value" : "TestBuyNowApi"
  }, {
    "name" : "host",
    "value" : "LAPTOP-93HH27QA"
  }, {
    "name" : "thread",
    "value" : "43728-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.buyer.test_001_buy_now_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casename",
    "value" : "'sku_id已下架'"
  }, {
    "name" : "expect_code",
    "value" : "'\"004\"'"
  }, {
    "name" : "expect_message",
    "value" : "'不合法'"
  }, {
    "name" : "expect_statuscode",
    "value" : "500"
  }, {
    "name" : "num",
    "value" : "1"
  }, {
    "name" : "sku_id",
    "value" : "538"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9bf6ec95ba2d184b.json",
  "parameterValues" : [ "'sku_id已下架'", "'\"004\"'", "'不合法'", "500", "1", "538" ]
}