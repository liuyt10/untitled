{
  "uid" : "d2fe4f37b3faea88",
  "name" : "test_buy_now_params[sku_id已删除-18575-1-500-004-不合法]",
  "fullName" : "test_buy_now_params#test_buy_now_params",
  "historyId" : "ca099a13c5ada7a3f12ae52e86e6b07f",
  "time" : {
    "start" : 1658645530963,
    "stop" : 1658645531042,
    "duration" : 79
  },
  "status" : "failed",
  "statusMessage" : "pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\n\n1 Failed Assumptions:\n\ntest_buy_now_params.py:38: AssumptionFailure\n>>\tpytest.assume(status_code==expect_statuscode,f'实际值是:{status_code},期望值是：{expect_statuscode}')\nAssertionError: 实际值是:200,期望值是：500\nassert False",
  "statusTrace" : "casename = 'sku_id已删除', sku_id = 18575, num = 1, expect_statuscode = 500\nexpect_code = '004', expect_message = '不合法'\n\n    @pytest.mark.parametrize('casename,sku_id,num,expect_statuscode,expect_code,expect_message',test_data)\n    def test_buy_now_params(casename,sku_id,num,expect_statuscode,expect_code,expect_message):\n    \n        resp = buy_now(sku_id=sku_id,num=num)\n        print(resp.status_code)\n        status_code = resp.status_code\n        print(resp.text)\n        # assert status_code==expect_statuscode\n        pytest.assume(status_code==expect_statuscode,f'实际值是:{status_code},期望值是：{expect_statuscode}')\n        print(resp.text)\n        # 断言响应信息中的code\n        # assert resp.json()['code'] == expect_code\n        # assert resp.json()['message'] == expect_message\n        # 第一个参数是判断表达式，第二个参数是失败之后的提示语\n>       pytest.assume(resp.json()['code'] == expect_code,f\"实际值是：{resp.json()['code']},期望值是：{expect_code}\")\n\ntest_buy_now_params.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nD:\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000230415182B0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           pytest_assume.plugin.FailedAssumption: \nE           Original Failure:\nE           \nE           >> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\nE           \nE           1 Failed Assumptions:\nE           \nE           test_buy_now_params.py:38: AssumptionFailure\nE           >>\tpytest.assume(status_code==expect_statuscode,f'实际值是:{status_code},期望值是：{expect_statuscode}')\nE           AssertionError: 实际值是:200,期望值是：500\nE           assert False\n\nD:\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: FailedAssumption",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_buyer_token",
    "time" : {
      "start" : 1658645529855,
      "stop" : 1658645530022,
      "duration" : 167
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1658645529713,
      "stop" : 1658645529855,
      "duration" : 142
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "get_buyer_token::0",
    "time" : {
      "start" : 1658645534774,
      "stop" : 1658645534774,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_buy_now_params"
  }, {
    "name" : "host",
    "value" : "LAPTOP-93HH27QA"
  }, {
    "name" : "thread",
    "value" : "31848-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_buy_now_params"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casename",
    "value" : "'sku_id已删除'"
  }, {
    "name" : "expect_code",
    "value" : "'004'"
  }, {
    "name" : "expect_message",
    "value" : "'不合法'"
  }, {
    "name" : "expect_statuscode",
    "value" : "500"
  }, {
    "name" : "num",
    "value" : "1"
  }, {
    "name" : "sku_id",
    "value" : "18575"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d2fe4f37b3faea88.json",
  "parameterValues" : [ "'sku_id已删除'", "'004'", "'不合法'", "500", "1", "18575" ]
}