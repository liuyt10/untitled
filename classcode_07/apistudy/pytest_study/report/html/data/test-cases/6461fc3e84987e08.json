{
  "uid" : "6461fc3e84987e08",
  "name" : "test_buy_now_params[sku_id已下架-538-1-500-004-不合法]",
  "fullName" : "test_buy_now_params#test_buy_now_params",
  "historyId" : "7d4dc00b180cd0e36e14f9e456a9c398",
  "time" : {
    "start" : 1659539465179,
    "stop" : 1659539465645,
    "duration" : 466
  },
  "status" : "failed",
  "statusMessage" : "pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\n\n1 Failed Assumptions:\n\ntest_buy_now_params.py:40: AssumptionFailure\n>>\tpytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\nAssertionError: 实际值是:200,期望值是：500\nassert False",
  "statusTrace" : "casename = 'sku_id已下架', sku_id = 538, num = 1, expect_statuscode = 500\nexpect_code = '004', expect_message = '不合法'\n\n    @pytest.mark.parametrize('casename,sku_id,num,expect_statuscode,expect_code,expect_message', test_data)\n    def test_buy_now_params(casename, sku_id, num, expect_statuscode, expect_code, expect_message):\n        resp = buy_now(sku_id=sku_id, num=num)\n        print(resp.status_code)\n        status_code = resp.status_code\n        print(resp.text)\n        # assert status_code==expect_statuscode\n        pytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\n        print(resp.text)\n        # 断言响应信息中的code\n        # assert resp.json()['code'] == expect_code\n        # assert resp.json()['message'] == expect_message\n        # 第一个参数是判断表达式，第二个参数是失败之后的提示语\n>       pytest.assume(resp.json()['code'] == expect_code, f\"实际值是：{resp.json()['code']},期望值是：{expect_code}\")\n\ntest_buy_now_params.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           pytest_assume.plugin.FailedAssumption: \nE           Original Failure:\nE           \nE           >> JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\nE           \nE           1 Failed Assumptions:\nE           \nE           test_buy_now_params.py:40: AssumptionFailure\nE           >>\tpytest.assume(status_code == expect_statuscode, f'实际值是:{status_code},期望值是：{expect_statuscode}')\nE           AssertionError: 实际值是:200,期望值是：500\nE           assert False\n\n..\\..\\..\\venv\\pythonfile\\lib\\site-packages\\requests\\models.py:975: FailedAssumption",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_redis",
    "time" : {
      "start" : 1659539464035,
      "stop" : 1659539464036,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_buyer_token",
    "time" : {
      "start" : 1659539463846,
      "stop" : 1659539464035,
      "duration" : 189
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "get_redis::0",
    "time" : {
      "start" : 1659539471613,
      "stop" : 1659539471613,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_buyer_token::0",
    "time" : {
      "start" : 1659539471614,
      "stop" : 1659539471614,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_buy_now_params"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BQAO4M4"
  }, {
    "name" : "thread",
    "value" : "26780-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_buy_now_params"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "casename",
    "value" : "'sku_id已下架'"
  }, {
    "name" : "expect_code",
    "value" : "'004'"
  }, {
    "name" : "expect_message",
    "value" : "'不合法'"
  }, {
    "name" : "expect_statuscode",
    "value" : "500"
  }, {
    "name" : "num",
    "value" : "1"
  }, {
    "name" : "sku_id",
    "value" : "538"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6461fc3e84987e08.json",
  "parameterValues" : [ "'sku_id已下架'", "'004'", "'不合法'", "500", "1", "538" ]
}